#!/usr/bin/python

##
## EPITECH 2017
## andy.begin
## math project
##

from math import *
import sys

def arg_error():
	ac = len(sys.argv)
	if ac != 2:
		print ("%s: Not enough or too much arguments. Try %s -h." %(sys.argv[0], sys.argv[0]))
		sys.exit(84)
	elif sys.argv[1] == "-h":
		print ("USAGE\n\t%s file\n\nDESCRIPTION" %(sys.argv[0]))
		print ("\tfile\ta csv file containing \"vol;ph\" lines")
		sys.exit(0)
	str = sys.argv[1]
	tab = str.split('.')
	l = len(tab)
	if tab[l - 1] != "csv":
		print ("%s: The file must be a csv file. Try %s -h." %(sys.argv[0], sys.argv[0]))
		sys.exit(84)
	return str

def get_content(path):
	try:
		csv = open(path, "r")
	except:
		print ("%s: The file doesn't exist. Try %s -h." %(sys.argv[0], sys.argv[0]))
		sys.exit(84)
	test = csv.read()
	csv.close()
	return test

def recup_2d_array(lines):
	tab = [[]]
	i = 0
	for line in lines:
		nbr = line.split(";")
		if float(nbr[0]) < 0:
			print ("%s: Invalid data. Try %s -h." %(sys.argv[0], sys.argv[0]))
			sys.exit(84)
		if float(nbr[1]) < 1 or float(nbr[1]) > 14:
			print ("%s: Invalid data. Try %s -h." %(sys.argv[0], sys.argv[0]))
			sys.exit(84)
		try:
			tab[i].append(float(nbr[0]))
			tab[i].append(float(nbr[1]))
		except:
			print ("%s: Invalid file. Try %s -h." %(sys.argv[0], sys.argv[0]))
			sys.exit(84)
		tab.append([])
		i += 1
	tab[i] = [0,0]
	return tab

def derivation(tab):
	d = [[]]
	tmp = [[]]
	i = 1
	x = 0
	j = 0
	while i < len(tab) - 1:
		if i != 1:
			d.append([])
			tmp.append([])
		tmp[j].append(tab[i + 1][1] - tab[i - 1][1])
		tmp[j].append(tab[i + 1][0] - tab[i - 1][0])
		if tmp[j][1] == 0:
			print ("%s: Invalid data. Try %s -h." %(sys.argv[0], sys.argv[0]))
			sys.exit(84)
		else:
			d[x].append(tab[i][0])
			d[x].append(tmp[j][0]/tmp[j][1])
		x += 1
		j += 1
		i += 1
	return d

def display_tab(tab):
	i = 0
	while i < len(tab) - 2:
		print ("Volume: %f" % tab[i][0]).rstrip('0').rstrip('.'), "ml -> %.2f" % (tab[i][1])
		i += 1
	print
	return

def equivalent(tab):
	i = 0
	big = 0
	keep = 1
	while i < len(tab) - 1:
		tmp = abs(tab[i][1] - tab[i + 1][1])
		if tmp > big:
			keep = i
			big = tmp
		i += 1
	return (keep)

def equivalent_end(tab):
	i = 0
	while i < len(tab) - 1:
		if tab[i][1] < 0:
			return(i - 1)
		i += 1

def detail(tab, equi):
	step = abs(tab[equi + 1][0] - tab[equi][0]) / 0.1
	dif = tab[equi + 1][1] - tab[equi][1]
	delta = dif / step
	new = [[]]
	new[0].append(tab[equi][0])
	new[0].append(tab[equi][1])
	new.append([])
	i = 1
	new[i].append(tab[equi][0] + 0.1)
	new[i].append(tab[equi][1] + delta)
	new.append([])
	while (new[i][0] < tab[equi + 1][0] - 0.2):
		i += 1
		new[i].append(new[i - 1][0] + 0.1)
		new[i].append(new[i - 1][1] + delta)
		new.append([])
	equi += 1
	step = abs(tab[equi + 1][0] - tab[equi][0]) / 0.1
	dif = tab[equi + 1][1] - tab[equi][1]
	delta = dif / step
	i += 1
	new[i].append(tab[equi][0])
	new[i].append(tab[equi][1])
	new.append([])
	i += 1
	new[i].append(tab[equi][0] + 0.1)
	new[i].append(tab[equi][1] + delta)
	new.append([])
	while (new[i][0] <= tab[equi + 1][0]):
		i += 1
		new[i].append(new[i - 1][0] + 0.1)
		new[i].append(new[i - 1][1] + delta)
		new.append([])
	i += 1
	new[i].append(tab[equi + 1][0] + 0.1)
	new[i].append(tab[equi + 1][1] + delta)
	return new

def main():
	path = arg_error()
	content = get_content(path)
	lines = content.split("\n")
	tab = recup_2d_array(lines)
	d = derivation(tab)
	print ("Derivative:")
	display_tab(d)
	equi = equivalent(d)
	print ("Equivalent point at %f" % d[equi][0]).rstrip('0').rstrip('.'), "ml\n"
	tab = derivation(d)
	equi = equivalent(tab)
	print ("Second derivative:")
	display_tab(tab)
	tab = detail(tab, equi)
	print ("Second derivative estimated:")
	display_tab(tab)
	equi = equivalent_end(tab)
	print ("Equivalent point at %f" % tab[equi][0]).rstrip('0').rstrip('.'), "ml\n"	

if __name__ == "__main__":
	main()
